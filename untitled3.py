# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P4aUnUa4Pu2aTXCtZPSDOuQjlcPyHd9i
"""

import pandas as pd

import numpy as np

from google.colab import files
upload =files.upload()

dataset = pd.read_csv('Salary.csv')
dataset

print(dataset.shape)
print(dataset.head(5))

income_set = set(dataset['income'])
dataset['income'] = dataset['income'].map({'<=50K': 0, '>50K': 1}).astype(int)
print(dataset.head(5))

X = dataset.iloc[:, :-1].values
X

Y = dataset.iloc[:, -1].values
Y

!pip install scikit-learn

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_teswt = train_test_split(X,Y,test_size=0.25,random_state=1)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_train

error = []
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

n_samples_train = X_train.shape[0]

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=3 , metric = 'minkowski' , p=2)
model.fit(X_train, y_train)

age = int(input("Enter New Employee's Age: "))
education_num = int(input("Enter New Employee's Education Num: "))
capital_gain = int(input("Enter New Employee's Capital Gain: "))
workhours = int(input("Enter New Employee's Work Hours per week: "))
newEmp = [[age, education_num, capital_gain, workhours]]
result = model.predict(sc.transform(newEmp))
print(result)

if result == 1:
  print("Employee might have good salary")
else:
  print("Employee might not have good salary")

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.25,random_state=0) # Changed y_teswt to y_test
# %%
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
import numpy as np

# Reset error list
error = []

n_samples_train = X_train.shape[0]

# Ensure n_neighbors is less than or equal to n_samples_train
for i in range(1, min(40, n_samples_train + 1)):
    model = KNeighborsClassifier(n_neighbors=i)
    model.fit(X_train, y_train)
    pred_i = model.predict(X_test)
    error.append(np.mean(pred_i != y_test)) # Changed y_tesWt to y_test

plt.figure(figsize=(12, 6))
plt.plot(range(1, min(40, n_samples_train + 1)), error, color='red', linestyle='dashed', marker='o', markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.25,random_state=0) # Changed y_teswt to y_test

from sklearn.metrics import confusion_matrix, accuracy_score
#cm = confusion_matrix(y_test, y_pred)
#print(cm)
y_pred = model.predict(X_test) # Define y_pred before using it in accuracy_score
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_pred) * 70)) # Changed to format with parentheses